{"version":3,"sources":["js/index.js"],"names":["question","document","querySelector","choices","Array","from","querySelectorAll","progressText","scoreText","progressBarFull","currentQuestion","acceptingAnswers","score","questionCounter","availableQuestions","questions","choices1","choices2","choices3","choices4","answer","console","log","SCORE_POINTS","MAX_QUESTIONS","startGame","getNewQuestion","length","localStorage","setItem","window","location","assign","innerText","style","width","questionsIndex","Math","floor","random","forEach","choice","number","dataset","splice","addEventListener","e","selectedChoice","target","selectedAnswer","classToApply","incrementScore","parentElement","classList","add","setTimeout","remove","num"],"mappings":"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","file":"js.00a46daa.js","sourceRoot":"..\\src","sourcesContent":["const question = document.querySelector('#question')\r\nconst choices = Array.from(document.querySelectorAll('#choices-text'))\r\nconst progressText = document.querySelector('#progressText')\r\nconst scoreText = document.querySelector('#score')\r\nconst progressBarFull = document.querySelector('#progressBarFull')\r\n\r\nlet currentQuestion = {} //put it into an empty object\r\nlet acceptingAnswers = true\r\nlet score = 0\r\nlet questionCounter = 0\r\nlet availableQuestions = []\r\n\r\n\r\nlet questions = [\r\n    {\r\n        question: \"What name starts with C ?\",\r\n        choices1: 'Chandler' ,\r\n        choices2: 'Kristina',\r\n        choices3: 'Melony',\r\n        choices4: 'Henry',\r\n        answer: 1,       \r\n      },\r\n    {\r\n        question: \"What name starts with B ?\",\r\n        choices1: 'Chandler' ,\r\n        choices2: 'Kristina',\r\n        choices3: 'Melony',\r\n        choices4: 'Henry',\r\n        answer: 2,       \r\n      },\r\n    {\r\n        question: \"What name starts with Z ?\",\r\n        choices1: 'Chandler' ,\r\n        choices2: 'Kristina',\r\n        choices3: 'Melony',\r\n        choices4: 'Henry',\r\n        answer: 3,       \r\n      },\r\n      \r\n    {\r\n        question: \"What name starts with G ?\",\r\n        choices1: 'Chandler' ,\r\n        choices2: 'Kristina',\r\n        choices3: 'Melony',\r\n        choices4: 'Henry',\r\n        answer: 4,       \r\n      },     \r\n]\r\nconsole.log(questions)\r\n\r\nconst SCORE_POINTS = 100\r\nconst MAX_QUESTIONS = 4\r\n\r\n\r\nstartGame = () => { //starting a function\r\n    questionCounter = 0\r\n    score = 0\r\n    availableQuestions = [...questions] //using ... because using spread we can get the values from the choices\r\n    getNewQuestion()\r\n}\r\n\r\nconsole.log(startGame)\r\n\r\ngetNewQuestion = () => {\r\n    if (availableQuestions.length === 0 || questionCounter > MAX_QUESTIONS) {\r\n        localStorage.setItem('mostRecentScore',score) //this will keep track of the score as u take the quiz\r\n\r\n        return window.location.assign('/end.html')\r\n    }\r\n\r\n    questionCounter++\r\n    progressText.innerText = `Question ${questionCounter} of ${MAX_QUESTIONS}` //means the questions coutner text will be the current questions out of in this case 4 questions\r\n    progressBarFull.style.width = `${(questionCounter/MAX_QUESTIONS) * 100}%` //calculate the question we are on and multiply it by percent \r\n\r\n\r\n    const questionsIndex = Math.floor(Math.random() * availableQuestions.length) //this will calculate the question index\r\n    currentQuestion= availableQuestions[questionsIndex] //it will keep track of what question we are on\r\n    question.innerText = currentQuestion.question //show the text the question will show\r\n    console.log(questionsIndex)\r\n    \r\n\r\n    choices.forEach(choice => {\r\n        const number = choice.dataset['number'] //you'll know what choice we are clicking on\r\n        choice.innerText = currentQuestion['choice' + number]\r\n    })\r\n\r\n    availableQuestions.splice(questionsIndex, 1) //it adds item to the array\r\n\r\n    acceptingAnswers = true \r\n}\r\n\r\nchoices.forEach(choice => {\r\n    choice.addEventListener('click', e => {\r\n        if(!acceptingAnswers) return    \r\n\r\n        acceptingAnswers = false\r\n        const selectedChoice = e.target\r\n        const selectedAnswer =  selectedChoice.dataset['number']\r\n\r\n        let classToApply = selectedAnswer == currentQuestion.answer ? 'correct' : 'incorrect' //using ternary\r\n\r\n        if (classToApply === 'correct'){    \r\n            incrementScore(SCORE_POINTS)\r\n        }\r\n\r\n         selectedChoice.parentElement.classList.add(classToApply) //this will count if you answer the question correctly\r\n         \r\n         setTimeout(() => {\r\n           selectedChoice.parentElement.classList.remove(classToApply) //this will allow score to change if u get it wrong\r\n             getNewQuestion ()\r\n        }, 1000)\r\n    })  \r\n})\r\n\r\nincrementScore = num => {\r\n    score += num\r\n    scoreText.innerText = score\r\n}\r\n\r\nconsole.log(incrementScore)\r\n\r\nstartGame()"]}
{"version":3,"sources":["js/index.js"],"names":["console","log","question","document","querySelector","choices","Array","from","querySelectorAll","scoreText","progressText","progressBarFull","currentQuestion","acceptingAnswers","score","questionCounter","availableQuestions","questions","choice1","choice2","choice3","choice4","answer","SCORE_POINTS","maxquestions","startGame","getNewQuestion","length","localStorage","setItem","window","location","assign","innerText","style","width","questionsIndex","Math","floor","random","forEach","choice","number","dataset","splice","addEventListener","e","selectedChoice","target","selectedAnswer","classToApply","incrementScore","parentElement","classList","add","setTimeout","remove","num"],"mappings":"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","file":"js.00a46daa.js","sourceRoot":"..\\src","sourcesContent":["console.log(\"connected\")\r\nconst question = document.querySelector(\"#question\"); //allows you to change the nature of the element (class to id, vice versa)\r\nconst choices = Array.from(document.querySelectorAll(\".choice-text\"));\r\nconst scoreText = document.querySelector(\"#score\");\r\nconst progressText = document.querySelector('#progressText')\r\nconst progressBarFull = document.querySelector('#progressBarFull')\r\n\r\nlet currentQuestion = {}; //put it into an empty object\r\nlet acceptingAnswers = true;\r\nlet score = 0; //score starts at 0\r\nlet questionCounter = 0; //questions start at 0\r\nlet availableQuestions = [];\r\n\r\nlet questions = [\r\n    {\r\n        question: \"What country is Venice located in?\",\r\n        choice1: \"France\",\r\n        choice2: \"Italy\",\r\n        choice3: \"Australia\",\r\n        choice4: \"Japan\",\r\n        answer: 2,\r\n      },\r\n      {\r\n        question: \"Who is the main character in Harry Potter?\",\r\n        choice1: \"Henry Porter\",\r\n        choice2: \"Hairy Potter\",\r\n        choice3: \"Harry Potter\",\r\n        choice4: \"Henrie Potsticker\",\r\n        answer: 3,\r\n      },\r\n      {\r\n        question: \"Which of these Avengers isn't dead?\",\r\n        choice1: \"Iron Man\",\r\n        choice2: \"Hawkeye\",\r\n        choice3: \"Black Widow\",\r\n        choice4: \"Vision\",\r\n        answer: 2,\r\n      },\r\n      {\r\n        question: \"Who is the best spiderman?\",\r\n        choice1: \"Tobey Maguire\",\r\n        choice2: \"Andrew Garfield\",\r\n        choice3: \"Tom Holland\",\r\n        choice4: \"none of them\",\r\n        answer: 3,\r\n      },\r\n]\r\nconsole.log(questions)\r\n\r\nconst SCORE_POINTS = 100\r\nconst maxquestions = 4\r\n\r\nstartGame = () => { //starting a function\r\n    questionCounter = 0\r\n    score = 0\r\n    availableQuestions = [...questions] //using ... because using spread we can get the values from the choices\r\n    getNewQuestion()\r\n}\r\n\r\ngetNewQuestion = () => {\r\n    if (availableQuestions.length === 0 || questionCounter > maxquestions) {\r\n        localStorage.setItem(\"mostRecentScore\",score) //this will keep track of the score as u take the quiz\r\n\r\n        return window.location.assign(\"/end.html\"); // PERHAPS THE PROBLEM ???????????????????????????????????????????????\r\n    }\r\n    questionCounter++\r\n    progressText.innerText = `Question ${questionCounter} of ${maxquestions}` //means the questions coutner text will be the current questions out of in this case 4 questions\r\n    progressBarFull.style.width = `${(questionCounter/maxquestions) * 100}%` //calculate the question we are on and multiply it by percent \r\n\r\n\r\n    const questionsIndex = Math.floor(Math.random() * availableQuestions.length) //this will calculate the question index\r\n    currentQuestion= availableQuestions[questionsIndex] //it will keep track of what question we are on\r\n    question.innerText = currentQuestion.question //show the text the question will show\r\n    console.log(questionsIndex)\r\n        \r\n    choices.forEach((choice) => {\r\n        const number = choice.dataset[\"number\"]; //you'll know what choice we are clicking on\r\n        choice.innerText = currentQuestion[\"choice\" + number];\r\n    });\r\n    \r\n    availableQuestions.splice(questionsIndex, 1); //it adds item to the array\r\n\r\n    acceptingAnswers = true;    \r\n};\r\n\r\nchoices.forEach((choice) => {\r\n    choice.addEventListener(\"click\", (e) => {\r\n      if (!acceptingAnswers) return;\r\n\r\n      acceptingAnswers = false;\r\n      const selectedChoice = e.target;\r\n      const selectedAnswer = selectedChoice.dataset[\"number\"];\r\n\r\n        let classToApply = selectedAnswer == currentQuestion.answer ? \"correct\" : \"incorrect\" //using ternary\r\n\r\n        if (classToApply === \"correct\"){    \r\n            incrementScore(SCORE_POINTS)\r\n        }\r\n\r\n         selectedChoice.parentElement.classList.add(classToApply) //this will count if you answer the question correctly\r\n         \r\n         setTimeout(() => {\r\n           selectedChoice.parentElement.classList.remove(classToApply) //this will allow score to change if u get it wrong\r\n            getNewQuestion ()\r\n        }, 1000)\r\n    })  \r\n})\r\n\r\nincrementScore = num => {\r\n    score += num\r\n    scoreText.innerText = score\r\n}\r\n\r\nconsole.log(incrementScore)\r\n\r\nstartGame()"]}